/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.aub

import groovyx.net.http.ContentType
import groovyx.net.http.RESTClient
import org.json.JSONArray
import org.json.JSONObject
import spock.lang.Shared
import spock.lang.Specification

class EmbeddedRegistrySpec extends Specification {

    private static Integer SERVER_PORT = 8888;

    @Shared
    def httpClient = new RESTClient("http://localhost:$SERVER_PORT")

    @Shared
    EmbeddedRegistry subject = new EmbeddedRegistry(SERVER_PORT)

    def setup() {
        subject.start()
        subject.purge()
    }

    def cleanup() {
        subject.stop()
    }

    def "should start http server on given port"() {
        when:
        def code = httpClient.get(path: "").status

        then:
        code == 200
    }

    def "should register a new version of a schema under the subject Kafka-value"() {
        when:
        def response = postSchemaForSubject("Kafka-value", "{\"type\": \"string\"}")

        then:
        response.status == 200
        response.data.id == 1
    }

    def "should list all subjects"() {
        given:
        postSchemaForSubject("Subject-1", "{\"type\": \"string\"}")
        postSchemaForSubject("Subject-2", "{\"type\": \"string\"}")

        when:
        def response = httpClient.get(path: "/subjects")

        then:
        response.status == 200
        JSONArray responseJson = new JSONArray(response.data.getText())
        responseJson as Set == ["Subject-1", "Subject-2"] as Set

    }

    def "should fetch a schema by globally unique id"() {
        def schema = "{\"type\": \"string\"}"
        given:
        def firstSubjectId =
                postSchemaForSubject("Subject-1", schema).data.id
        def secondSubjectId =
                postSchemaForSubject("Subject-2", schema).data.id

        when:
        def firstSubjectResponse = httpClient.get(path: "/schemas/ids/$firstSubjectId")
        def secondSubjectResponse = httpClient.get(path: "/schemas/ids/$secondSubjectId")

        then:
        firstSubjectResponse.status == 200
        new JSONObject(firstSubjectResponse.data.getText()).get("schema") == "\"string\""
        secondSubjectResponse.status == 200
        new JSONObject(secondSubjectResponse.data.getText()).get("schema") == "\"string\""

    }


    def "should register and fetch a more complicated schema by globally unique id"() {
        def schema = new File("src/test/resources/sample-avro.json").text
        given:
        def firstSubjectId = postSchemaForSubject("Subject-1", schema).data.id

        when:

        def response = httpClient.get(path: "/schemas/ids/$firstSubjectId")

        then:
        response.status == 200
        new JSONObject(response.data.getText()).get("schema") == schema.replaceAll("\n", "").replaceAll(" ", "")

    }

    def postSchemaForSubject(def subject, def schema) {
        return httpClient.post(
                path: "/subjects/$subject/versions",
                body: [wrapSchema(schema)],
                contentType: ContentType.JSON)
    }

    private static String wrapSchema(String schema) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("schema", schema);
        jsonObject.toString()
    }

    private static URI createURI(String path) {
        URI.create("http://localhost:8888$path")
    }

}
