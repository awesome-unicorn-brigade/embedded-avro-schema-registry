/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.aub

import groovy.json.JsonSlurper
import org.json.JSONObject
import spock.lang.Specification

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

class EmbeddedRegistrySpec extends Specification {

    HttpClient httpClient = HttpClient.newHttpClient();
    EmbeddedRegistry subject;
    JsonSlurper jsonSlurper = new JsonSlurper()


    def setup() {
        subject = new EmbeddedRegistry(8888);
        subject.start()
    }

    def cleanup() {
        subject.stop()
    }

    def "should start http server on given port "() {
        when:
        def code = httpClient.send(HttpRequest.newBuilder()
                .uri(createURI(""))
                .build(),
                HttpResponse.BodyHandlers.ofString()).statusCode()

        then:
        code == 200
    }


    def "should register a new version of a schema under the subject Kafka-value "() {
        when:
        def response = postSchemaForSubject("Key-value", "{\"type\": \"string\"}")

        then:
        response.statusCode() == 200
        response.body() == "{\"id\":1}"
    }


    def "should list all subjects"() {
        given:
        def subject1 = "Subject-1"
        def subject2 = "Subject-2"
        postSchemaForSubject(subject1, "{\"type\": \"string\"}")
        postSchemaForSubject(subject2, "{\"type\": \"string\"}")

        when:
        def response = httpClient.send(HttpRequest.newBuilder()
                .uri(createURI("/subjects"))
                .build(),
                HttpResponse.BodyHandlers.ofString())

        then:
        response.statusCode() == 200
        jsonSlurper.parseText(response.body()) as Set == [subject1, subject2] as Set

    }

    def "should fetch a schema by globally unique id"() {
        def schema = "{\\\"type\\\": \\\"string\\\"}"
        given:
        def firstSubjectId = jsonSlurper.parseText(postSchemaForSubject("Subject-1", schema).body()).id
        def secondSubjectId = jsonSlurper.parseText(postSchemaForSubject("Subject-2", schema).body()).id

        when:
        def response = httpClient.send(HttpRequest.newBuilder()
                .uri(createURI("/schemas/ids/$firstSubjectId"))
                .build(),
                HttpResponse.BodyHandlers.ofString())

        then:
        response.statusCode() == 200
        response.body() == '{"schema":"\\"string\\""}'

    }


    def "should fetch a more complicated schema by globally unique id"() {
        def schema = new File("src/test/resources/sample-avro.json").text
        given:
        def firstSubjectId = jsonSlurper.parseText(postSchemaForSubject("Subject-1", schema).body()).id

        when:
        def response = httpClient.send(HttpRequest.newBuilder()
                .uri(createURI("/schemas/ids/$firstSubjectId"))
                .build(),
                HttpResponse.BodyHandlers.ofString())

        then:
        response.statusCode() == 200
        response.body() ==  wrapSchema(schema)

    }

    def postSchemaForSubject(def subject, def schema) {
        def uri = createURI("/subjects/$subject/versions")
        def body = HttpRequest.BodyPublishers.ofString(wrapSchema(schema))
        return httpClient.send(HttpRequest.newBuilder()
                .uri(uri)
                .POST(body)
                .build(),
                HttpResponse.BodyHandlers.ofString())
    }

    private String wrapSchema(String schema) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("schema", schema);
        jsonObject.toString()
    }

    private static URI createURI(String path) {
        URI.create("http://localhost:8888$path")
    }

}
